

#define ZMK_MACRO_(name,...) \
	name: name { \
			label = ZMK_MACRO_STRINGIFY(ZM_ ## name); \
			compatible = "zmk,behavior-macro"; \
			#binding-cells = <0>; \
			wait-ms = <7>; \
			tap-ms = <7>; \
			__VA_ARGS__ \
		};

&sl {
	release-after-ms = <1500>;
};


/ { behaviors {
	// Hold-tap for F-keys
	fn: fn_mod {
		compatible = "zmk,behavior-hold-tap";
		label = "F_MOD";
		tapping-term-ms = <295>;
		flavor = "balanced";
		#binding-cells = <2>;
		bindings = <&kp>, <&kp>;
	};
	
	// Hold-tap for Upper F-keys
	fm: high_fn_mod {
		compatible = "zmk,behavior-hold-tap";
		label = "HF_MOD";
		tapping-term-ms = <580>;
		flavor = "balanced";
		#binding-cells = <2>;
		bindings = <&kp>, <&kp>;
	};

	// Hold-tap for layer-space with retro-tap - not fully using until macros are ready
	lts: layer_tap_sfn {
		compatible = "zmk,behavior-hold-tap";
		label = "LAYER_TAP_SFN";
		#binding-cells = <2>;
		flavor = "hold-preferred";		// hold behavior when tapping-term-ms expired or another key is pressed
		tapping-term-ms = <10000>;
		bindings = <&mo>, <&kp>;
		retro-tap;						// tap behavior triggered when releasing if no other key was pressed
	};
	
	// Hold-tap for ctlr/esc
	cesc: hold_tap_ctrl_esc {
		compatible = "zmk,behavior-hold-tap";
		label = "CTRL_ESC";
		#binding-cells = <2>;
		tapping-term-ms = <240>;
		flavor = "balanced";		// hold behavior when tapping-term-ms expired or another key is pressed
		bindings = <&kp>, <&kp>;
	};
	
	
	hmf: homerow_mods_fast {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MODS_FAST";
		#binding-cells = <2>;
		tapping-term-ms = <130>;
		quick-tap-ms = <0>;
		flavor = "balanced";			// hold behavior when tapping-term-ms has expired or another key is pressed and released
		bindings = <&kp>, <&kp>;
	};
	
	hm: homerow_mods {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MODS";
		#binding-cells = <2>;
		tapping-term-ms = <165>;
		quick-tap-ms = <0>;
		flavor = "balanced";			// hold behavior when tapping-term-ms has expired or another key is pressed and released
		bindings = <&kp>, <&kp>;
	};
	
	hms: homerow_mod_slow {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MOD_SLOW";
		#binding-cells = <2>;
		tapping-term-ms = <200>;
		quick-tap-ms = <0>;
		flavor = "balanced";			// hold behavior when tapping-term-ms has expired or another key is pressed and released
		bindings = <&kp>, <&kp>;
	};
	
	// For that zpecial finger
	hmss: homerow_mod_sup_slow {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MOD_SUP_SLOW";
		#binding-cells = <2>;
		tapping-term-ms = <249>;
		quick-tap-ms = <0>;
		flavor = "tap-preferred";		// hold behavior when tapping-term-ms has expired. tap behavior when another key is pressed
		bindings = <&kp>, <&kp>;
	};
		
	sq: sticky_q {
		compatible = "zmk,behavior-sticky-key";
		label = "STICKY_Q";
		quick-release;
		#binding-cells = <1>;
		release-after-ms = <1500>;
		bindings = <&kp>;
	};
	
	sk_m: sticky_q {
		compatible = "zmk,behavior-sticky-key";
		label = "SK_FOR_MACRO";
		// quick-release;
		#binding-cells = <1>;
		release-after-ms = <MACRO_WAIT_LONG>;
		bindings = <&kp>;
	};
	
	sk_mq: sticky_mq {
		compatible = "zmk,behavior-sticky-key";
		label = "SK_FOR_MACRO_QR";
		quick-release;
		#binding-cells = <1>;
		release-after-ms = <MACRO_WAIT_LONG>;
		bindings = <&kp>;
	};
	
	k_or_lay: key_or_layer {
		compatible = "zmk,behavior-hold-tap";
		label = "K_OR_NUM";
		#binding-cells = <2>;
		tapping-term-ms = <156>;
		quick-tap-ms = <0>;
		flavor = "balanced";			// hold behavior when tapping-term-ms has expired or another key is pressed and released
		bindings = <&kp>, <&tog>;
	};
		
	lay_or_lay: layer_or_layer {
		compatible = "zmk,behavior-hold-tap";
		label = "K_OR_NUM";
		#binding-cells = <2>;
		tapping-term-ms = <156>;
		quick-tap-ms = <0>;
		flavor = "balanced";			// hold behavior when tapping-term-ms has expired or another key is pressed and released
		bindings = <&mo>, <&tog>;
	};
	
        td_plus_sum: tap_dance_plus_sum {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PLUS_SUM";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp KP_PLUS>, <&m_eq_sum>;
	};
		
        td_emails: tap_dance_emails {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EMAILS";
            #binding-cells = <0>;
            tapping-term-ms = <420>;
            bindings = <&m_email_w>, <&m_email_g>, <&m_email_w_old>, <&m_email_ph>;
	};
		
        td_names: tap_dance_namess {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NAMES";
            #binding-cells = <0>;
            tapping-term-ms = <420>;
            bindings = <&m_phuerta>, <&m_ph>, <&m_pihy>;
	};
		
	ZMK_MACRO_(m_eq_sum,
		bindings = <&kp RBKT &kp S &kp M &kp E &kp MINUS>;
	)
	
	ZMK_MACRO_(m_9_16,
		bindings = <&macro_wait_time 50>,
			<&kp LALT>,
			<&macro_wait_time 7>,
			<&kp Q &kp J &kp SEMI &kp KP_N9 &kp TAB &kp KP_N1 &kp KP_N6 &kp ENTER>;
	)
		
	ZMK_MACRO_(m_email_w,
		bindings = <&kp G &kp SEMI &kp M &kp K &kp A &kp GRAVE &kp J>,
				<&kp LS(I)>,
				<&kp T &kp J &kp S &kp J &kp GRAVE &kp V &kp SEMI>,
				<&kp W &kp C &kp COMMA &kp B &kp J &kp C>,
				<&kp I &kp V &kp COMMA &kp E>;
	)
		
	ZMK_MACRO_(m_email_g,
		bindings = <&kp G &kp SEMI &kp M &kp K &kp A &kp GRAVE &kp J &kp DOT>,
				<&kp LS(I)>,
				<&kp W &kp E &kp J &kp L &kp C>,
				<&kp I &kp V &kp COMMA &kp E>;
	)
		
	ZMK_MACRO_(m_email_w_old,
		bindings = <&kp G &kp SEMI &kp M &kp K &kp A &kp GRAVE &kp J>,
				<&kp LS(I)>,
				<&kp T &kp J &kp S &kp J &kp GRAVE &kp V &kp SEMI &kp J>,
				<&kp F &kp FSLH &kp L &kp S &kp COMMA &kp A &kp S>,
				<&kp I &kp V &kp COMMA &kp E>;
	)
		
	ZMK_MACRO_(m_email_ph,
		bindings = <&kp G &kp SEMI>,
				<&kp LS(I)>,
				<&kp T &kp J &kp S &kp J &kp GRAVE &kp V &kp SEMI>,
				<&kp W &kp C &kp COMMA &kp B &kp J &kp C>,
				<&kp I &kp V &kp COMMA &kp E>;
	)
	
	ZMK_MACRO_(m_phuerta,
		bindings = <&kp G &kp SEMI &kp M &kp K &kp A &kp GRAVE &kp J>;
	)
	
	ZMK_MACRO_(m_ph,
		bindings = <&kp LS(G) &kp K &kp F &kp A &kp COMMA>,
				<&kp SPACE>,
				<&kp LS(SEMI) &kp M &kp K &kp A &kp GRAVE &kp J>;
	)
	
	ZMK_MACRO_(m_pihy,
		bindings = <&kp LS(G) &kp K &kp F &kp A &kp COMMA>,
				<&kp SPACE>,
				<&kp LS(L) &kp I>,
				<&kp SPACE>,
				<&kp LS(SEMI) &kp M &kp K &kp A &kp GRAVE &kp J>,
				<&kp SPACE>,
				<&kp LS(DOT) &kp M &kp E &kp SEMI &kp J>;
	)
}; };
