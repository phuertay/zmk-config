#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>


// #define DEFAULT 0
#define DEFAULT_HD 0
#define STENO 1
#define AL_Q 2
#define AL_W 3
#define AL_E 4
#define AL_R 5
#define AL_O 6
#define AL_P 7
#define AL_SEMI 8
#define AL_Z 9
#define AL_X 10
#define AL_C 11
#define AL_M 12
#define AL_FSLH 13
#define AL_DOT 14
#define NUM_HD 15
#define NUM_HD_ULTRA 16
#define NUM_HD_MID 17
#define NUM_HD_STENO_MODS 18
#define LCNUM 19
#define FN 20
#define NUM_L_HD 21
#define RCNUM_L 22
#define FN_L 23
#define DEFAULT_HD_2 24
#define SPFN_HD 25
#define MOUSE 26
#define FUNC_HD 27
#define FUNC_MACR 28
#define FUNC_STENO_MODS 29


#include "combos.dtsi"
#include "behaviors.dtsi"
#include "macros.dtsi"
#include "adaptive.dtsi"


/ {
	conditional_layers {
	compatible = "zmk,conditional-layers";
	num_hd_steno {
		if-layers = <STENO NUM_HD_ULTRA>;
		then-layer = <NUM_HD_STENO_MODS>;
	};
	function_hd_steno {
		if-layers = <STENO FUNC_HD>;
		then-layer = <FUNC_STENO_MODS>;
	};
	function_macro_steno {
		if-layers = <STENO FUNC_MACR>;
		then-layer = <FUNC_STENO_MODS>;
	};
};};




/ {
	keymap {
		compatible = "zmk,keymap";


		default_layer_hd {
			bindings = <
&kp ESC &fn F9 N1  &fn F3 N2  &fn F1 N3 &fn F5 N4  &fn F7 N5			&fn F6 N6 &fn F2 N7 &fn F10 N8  &fn F4 N9	&fn F8 N0   &fn F11 DEL
&kp TAB	&ak_Q &ak_W  &ak_E  &ak_R  &hmss LWIN T								&hmss RWIN Y		 &kp U		  &kp I	&ak_O  &ak_P  &fn F12 LBKT
&cesc LCTRL ESC &lt LCNUM A &kp S	&kp D &lt NUM_HD_ULTRA F	&hms RALT G		&hms RALT H	&kp J		&kp K			  &kp L			&ak_SEMI &kp SQT
&hms_m_lsrs LSHFT 0 &ak_Z &hms_m_x LALT 0  &hm_m_c LSHFT 0 &hmms LCTRL V &kp B			&kp N &hms_m_m RCTRL 0 &hmf RSHFT COMMA &hms_m_dot LALT 0 &ak_FSLH &hms RSHFT KP_NUM
				    &hm TILDE RBKT &hm H BSLH									   &kp MINUS		  &kp EQUAL
						&hmss SPACE GRAVE &lts SPFN_HD BSPC			&lts SPFN_HD ENTER  &kp SPACE
							&kp LALT &kp DEL				&tog NUM_HD_ULTRA &kp LWIN
							&sl FUNC_MACR &m_calc	&kp C_AC_REFRESH &sl FUNC_HD
			>;
		};


		steno {
			bindings = <
&sys_reset &none      &none	 &none	    &none      &none			&none	&none	&none	&none	&none		&none
&none	   &kp N1     &kp N2	 &kp N3	    &kp N4     &kp N5			&kp N6	&kp N7	&kp N8	&kp N9	&kp N0		&kp MINUS
&none      &kp PLV_X1 &kp PLV_TL &kp PLV_PL &kp PLV_HL &kp PLV_X2 		&kp PLV_X3 &kp PLV_FR &kp PLV_PR &kp PLV_LR &kp PLV_TR &kp PLV_DR
&none      &kp PLV_SL &kp PLV_KL &kp PLV_WL &kp PLV_RL &kp PLV_X4 		&kp PLV_X5 &kp PLV_RR &kp PLV_BR &kp PLV_GR &kp PLV_SR &kp PLV_ZR
			&none	&none 							&none	&none
				&kp PLV_A  &kp PLV_O					&kp PLV_E &kp PLV_U
					&m_plo_look &m_plo_add	&trans &m_plo_focus
					&sl FUNC_MACR &m_calc	&kp C_AC_REFRESH &sl FUNC_HD
			>;
		};


		adaptive_q {
		 	bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &m_dqt &m_dge  &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans					   &trans &trans
					&trans &trans				&trans &trans
						&trans &trans		&trans &trans
						&trans &trans		&trans &trans
			>;
		};
	

		adaptive_w {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &kp W  &m_dkk &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};

	
		adaptive_e {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&kp G  &m_ddw &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &m_gc  &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &kp B  &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
	
		adaptive_r {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &kp C  &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
	
		adaptive_o {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &kp M  &m_mk  &trans &kp L  &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};

		
		adaptive_p {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &kp O  &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
			   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
	

		adaptive_SEMI {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&m_dga &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};


		adaptive_z {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &m_dgc &trans &trans						&trans &trans &trans &trans &kp B  &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};


		adaptive_x {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&m_dvy &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
		
		
		adaptive_c {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&kp G  &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
		
			

		adaptive_m {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&kp G  &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &kp J  &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};

		adaptive_fslh {
			bindings = <
&kp ESC	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&m_dba &m_dbs &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &m_dbc &trans &trans						&trans &m_djm &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&m_dg_gr &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
	
		adaptive_dot {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans	
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &kp L  &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};		



		unused_numeric_layer_hd {
			bindings = <
&trans	&fm F21 F9	 &fm F15 F3	   &fm F13 F1	 &fm F17 F5		&fm F19 F7	 	  		&kp N7	&fm F14 F2	  &kp KP_DIVIDE &kp KP_MULTIPLY &kp RBKT &fm F23 F11
&tog NUM_HD_ULTRA	&kp TAB			 &kp PG_UP  &kp UP       &kp PG_DN	  &kp LA(TAB)			&kp LA(N2)	&fm F7 LS(N5) &fm F8 LS(N0) &fm F9 LS(N1)	&fm F12 KP_MINUS &fm F12 MINUS
&trans	&lts_tp LCNUM ENTER &kp LEFT   &kp DOWN	 &kp RIGHT	  &kp LA(N3)						&kp LC(INS)	&fm F4 LS(N9) &fm F5 LS(N4) &fm F6 LS(N6)	&td_plus_sum	&fm F24 EQUAL
&m_excel_go_to &kp LSHFT &hms LALT ESC	&hms LSHFT RC(DEL)  &hms LCTRL RC(BSPC) &kp LA(N7)		&kp LS(INS)	&fm F1 LS(N3)	&fm F2 LS(N7) &fm F3 LS(N2)	&kp ENTER	&lay_or_lay DEFAULT_HD_2 NUM_HD
							 &kp RC(ENTER)	&hm H RC(X)						&fm F10 LS(N8) &fm F11 H
									&kp SPACE &lts SPFN_HD BSPC			&lts SPFN_HD  TAB &lts SPFN_HD SPACE
											&trans &kp DEL		&to DEFAULT_HD	&trans
											&trans &trans		&mo FN &trans
			>;
		};



		numeric_layer_ultra_KP_N {
			bindings = <
&trans	&fm F21 F9	 &fm F15 F3	   &fm F13 F1	 &fm F17 F5		&fm F19 F7	 	  							&kp N7	&fm F14 F2	  &kp KP_DIVIDE &kp KP_MULTIPLY &kp RBKT &fm F23 F11
&kp TAB		&m_paste_t			 &kp PG_UP  &kp UP       &kp PG_DN	  &kp LA(TAB)			&kp LA(N2)	&fm F7 KP_N7 &fm F8 KP_N8 &fm F9 KP_N9	&fm F12 KP_MINUS &fm F12 MINUS
&trans	&lts_tp LCNUM KP_DOT &kp LEFT &kp DOWN 	 &kp RIGHT	  &kp LA(N3)			&kp LC(INS)	&fm F1 KP_N1 &fm F2 KP_N2 &fm F3 KP_N3	&kp ENTER	&fm F24 EQUAL
&m_excel_go_to &kp LSHFT &hms LALT ESC	&hms LSHFT RC(DEL)  &hms LCTRL RC(BSPC) &kp LA(N7)				&kp LS(INS)	&fm F4 KP_N4 &fm F5 KP_N5 &fm F6 KP_N6 	&td_plus_sum	&lay_or_lay DEFAULT_HD_2 NUM_HD
						 &kp RC(ENTER)	&hm H RC(X)									 &fm F10 KP_N0 &fm F11 H
								&kp SPACE &lts SPFN_HD BSPC				&lts SPFN_HD  TAB &hms SPACE KP_N0
											&trans &kp DEL		&to DEFAULT_HD	&trans
											&trans &trans		&mo FN &trans
			>;
		};


		num_hd_mid {
			bindings = <
&trans	&fm F21 F9	 &fm F15 F3	   &fm F13 F1	 &fm F17 F5		&fm F19 F7	 	  		&kp N7	&fm F14 F2	  &kp KP_DIVIDE &kp KP_MULTIPLY &kp RBKT &fm F23 F11
&kp TAB		&m_paste_t		 &kp PG_UP  &kp UP       &kp PG_DN	  &kp LA(TAB)			&kp LA(N2)	&fm F7 LS(N5) &fm F8 LS(N0) &fm F9 LS(N1)	&fm F12 KP_MINUS &fm F12 MINUS
&trans	&lts LCNUM KP_DOT &kp LEFT &kp DOWN 	 &kp RIGHT	  &kp LA(N3)			&kp LC(INS)	&fm F4 LS(N9) &fm F5 LS(N4) &fm F6 LS(N6)	&td_plus_sum	 &fm F24 EQUAL
&m_excel_go_to &kp LSHFT &hms LALT ESC	&hms LSHFT RC(DEL)  &hms LCTRL RC(BSPC) &kp LA(N7)		&kp LS(INS)	&fm F1 LS(N3) &fm F2 LS(N7) &fm F3 LS(N2)	&kp ENTER	 &lay_or_lay DEFAULT_HD_2 NUM_HD
						 &kp RC(ENTER)	&hm H RC(X)									 &fm F10 LS(N8) &fm F11 KP_DOT
								&kp SPACE &lts SPFN_HD BSPC					&lts SPFN_HD  TAB &hms SPACE LS(N8)
											&trans &kp DEL		&to DEFAULT_HD	&trans
											&trans &trans		&mo FN &trans
			>;
		};



		num_hd_steno_mods {
			bindings = <
&trans &trans &trans &trans &trans &trans		&trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans		&trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans		&trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans		&trans &trans &trans &trans &trans &trans
		 &trans	&trans				  	  &trans &trans
			&trans &trans			&trans &trans
				&trans &trans	&to STENO &trans
				&trans &trans	&trans &trans
			>;
		};


/*		num_hd_up {
			bindings = <
&trans	&fm F21 F9	 &fm F15 F3	   &fm F13 F1	 &fm F17 F5		&fm F19 F7	 	  		&kp N7	&fm F14 F2	  &kp KP_DIVIDE &kp KP_MULTIPLY &kp RBKT &fm F23 F11
&kp TAB		&m_paste_t			 &kp PG_UP  &kp UP       &kp PG_DN	  &kp LA(TAB)			&kp LA(N2)	&fm F4 LS(N9) &fm F5 LS(N4) &fm F6 LS(N6) 	&td_plus_sum		&fm F12 MINUS
&trans	&lts_tp LCNUM KP_DOT &kp LEFT &kp DOWN 	 &kp RIGHT	  &kp LA(N3)			&kp LC(INS)	&fm F7 LS(N5) &fm F8 LS(N0) &fm F9 LS(N1) 	&fm F12 KP_MINUS	&fm F24 EQUAL
&m_excel_go_to &kp LSHFT &hms LALT ESC	&hms LSHFT RC(DEL)  &hms LCTRL RC(BSPC) &kp LA(N7)		&kp LS(INS)	&fm F1 LS(N3) &fm F2 LS(N7) &fm F3 LS(N2)	&kp ENTER		&lay_or_lay DEFAULT_HD_2 NUM_HD
						 &kp RC(ENTER)	&hm H RC(X)									 &fm F10 LS(N8) &fm F11 KP_DOT
								&kp SPACE &lts SPFN_HD BSPC					&lts SPFN_HD  TAB &hms SPACE LS(N8)
											&trans &kp DEL		&to DEFAULT_HD	&trans
											&trans &trans		&mo FN &trans
			>;
		};
*/	
				
		left_ctrl_num_layer {
			bindings = <
&trans &trans &trans		&trans		 &trans		   &trans						&trans &trans &trans &trans &trans &trans
&trans &trans &kp LA(PG_UP)	&kp RC(UP)	 &kp LA(PG_DN) &kp LS(LA(TAB))				&trans &trans &trans &trans &trans &trans
&trans &trans &kp RC(LEFT)	&kp RC(DOWN) &kp RC(RIGHT) &trans &trans				&trans &trans &trans &trans &trans &trans
&trans &trans &trans		&trans		 &trans		   &trans						&trans &trans &trans &trans &trans &trans
		 	  &trans		&trans															  	  &trans &trans
															&trans &trans			&trans &trans
																&trans &trans	&trans &trans
																&trans &trans	&trans &trans
			>;
		};
		
		fn_layer {
			bindings = <
&trans &trans  &trans  &trans  &trans  &trans					&trans &trans	  &trans	  &trans	  &trans	  &trans
&trans &kp F24 &kp F19 &kp F20 &kp F21 &trans					&trans &fm F19 F7 &fm F20 F8  &fm F21 F9  &fm F24 F12 &trans
&trans &trans  &kp F16 &kp F17 &kp F18 &trans					&trans &fm F16 F4 &fm F17 F5  &fm F18 F6  &trans	  &trans
&trans &trans  &kp F13 &kp F14 &kp F15 &trans		   			&trans &fm F13 F1 &fm F14 F2  &fm F15 F3  &trans	  &trans
			   &kp F23 &kp F22													  &fm F22 F10 &fm F23 F11	
									&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};			


		numeric_layer_left_hd {
			bindings = <
&trans	&kp GRAVE		 &kp KP_MULTIPLY &kp KP_DIVIDE	&fm F17 F5	  &fm F19 F7 				&fm F18 F6	 &fm F14 F2	 &fn F10 N0 &fm F16 F4		 &fm F20 F8	 &fm F23 F11
&trans		&fm F12 KP_MINUS &fm F9 LS(N1)	 &fm F8 LS(N0)	&fm F7 LS(N5) &kp LA(TAB)				&kp LA(TAB)	&kp PG_UP	 &kp UP		 &kp PG_DN	  &kp TAB	 &fm F24 F12
&trans		&kp ENTER	 &fm F3 LS(N2)	 &fm F2 LS(N7)	&fm F1 LS(N3) &kp RC(INS)				&kp LA(N1)	&kp LEFT	 &kp DOWN	 &kp RIGHT	  &lts RCNUM_L ENTER &trans
&lay_or_lay DEFAULT_HD_2 NUM_HD	&td_plus_sum	 &fm F6 LS(N6)	 &fm F5 LS(N4)	&fm F4 LS(N9) &kp LS(INS)	&kp LA(N2)	&kp RC(BSPC)	&kp RC(DEL)	 &kp ESC	  &trans 	&m_excel_go_to
							 &fm F11 KP_DOT  &fm F10 LS(N8) 						 &kp SPACE	 &kp RC(FSLH)
									&kp LS(N8) &lts SPFN_HD BSPC			&mo FN_L &trans
										&kp LALT &kp DEL		&tog NUM_L_HD  &trans
										&trans &trans			&to DEFAULT_HD &trans
			>;
		};
		
		
		right_ctrl_num_layer {
			bindings = <
&trans &trans &trans &trans &trans &trans					&trans			&trans		  &trans	   &trans		 &trans	&trans
&trans &trans &trans &trans &trans &trans					&kp LS(LA(TAB)) &kp LA(PG_UP) &kp RC(UP)   &kp LA(PG_DN) &trans &trans
&trans &trans &trans &trans &trans &trans					&trans			&kp RC(LEFT)  &kp RC(DOWN) &kp RC(RIGHT) &trans &trans
&trans &trans &trans &trans &trans &trans					&trans			&trans		  &trans	   &trans		 &trans	&trans
		 	  &trans &trans																  &trans	   &trans
								&trans &trans			&trans &trans
									&trans &trans	&trans &trans
									&trans &trans	&trans &trans
			>;
		};
		
		fn_layer_left {
			bindings = <
&trans &trans	   &trans	   &trans	   &trans	  &trans					&trans &trans  &trans  &trans  &trans  &trans
&trans &fm F24 F12 &fm F21 F9  &fm F20 F8  &fm F19 F7 &trans					&trans &kp F19 &kp F20 &kp F21 &kp F24 &trans
&trans &trans	   &fm F18 F6  &fm F17 F5  &fm F16 F4 &trans					&trans &kp F16 &kp F17 &kp F18 &trans  &trans
&trans &trans	   &fm F15 F3  &fm F14 F2  &fm F13 F1 &trans		   			&trans &kp F13 &kp F14 &kp F15 &trans  &trans
				   &fm F23 F11 &fm F22 F10 													   &kp F22 &kp F23	
													&trans &trans			&trans &trans
														&trans &trans	&trans &trans
														&trans &trans	&trans &trans
			>;
		};	


		default_layer_hd_2 {
						bindings = <
&kp ESC &fn F9 N1  &fn F3 N2  &fn F1 N3 &fn F5 N4  &fn F7 N5			&fn F6 N6 &fn F2 N7 &fn F10 N8  &fn F4 N9	&fn F8 N0   &fn F11 DEL
&kp TAB	&ak_Q &ak_W  &ak_E  &ak_R  &hmss LWIN T								&hmss RWIN Y		 &kp U		  &kp I	&ak_O  &ak_P  &fn F12 LBKT
&cesc LCTRL ESC &kp A	&kp S	&kp D &lt NUM_HD_ULTRA F	&hms RALT G					&hms RALT H		 &lt NUM_HD J		  &kp K			  &kp L			&ak_SEMI &kp SQT
&hms LSHFT LS(RSHIFT) &ak_Z &hms_m_x LALT 0  &hm_m_c LSHFT 0 &hms LCTRL V &lt NUM_HD B			&kp N &hms_m_m RCTRL 0 &hmf RSHFT COMMA &hms_m_dot LALT 0 &ak_FSLH &hms RSHFT KP_NUM
				    &hm TILDE RBKT &hm H BSLH									   &kp MINUS		  &kp EQUAL
						&hmss SPACE GRAVE &lts SPFN_HD BSPC				&lts SPFN_HD ENTER  &kp SPACE
							&kp LALT &kp DEL				&tog NUM_HD &kp LWIN
							&sl FUNC_MACR &kp	C_AL_CALC	&kp C_AC_REFRESH &sl FUNC_HD
			>;
		};
		

		spacefn_layer_hd {
			bindings = <
&to DEFAULT_HD	&fm F21 F9	 &fm F15 F3	  &fm F13 F1	&fm F17 F5 	&fm F19 F7	    				 &fm F18 F6  &fm F14 F2	 &fm F22 F10 	  &fm F16 F4 &fm F20 F8    &fm F23 F11
&trans 		&kp TAB		   &kp PG_UP  &kp UP       &kp PG_DN	 &kp LA(TAB)					&kp LA(TAB) &kp PG_UP	   &kp UP 	    &kp PG_DN  &kp TAB		 &fm F24 F12
&trans 		&hm RCTRL HOME &kp LEFT   &kp DOWN     &kp RIGHT	 &kp END						&kp HOME 	  &kp LEFT	   &kp DOWN     &kp RIGHT  &hm RCTRL END &kp NON_US_BSLH
&trans		&kp ENTER	   &hms LALT ESC	&hm LSHFT RC(DEL)  &hms RCTRL RC(BSPC)  &kp BSPC			&kp BSPC	  &hms RCTRL RC(BSPC) &hm LSHFT RC(DEL)  &hms LALT ESC	   &kp ENTER	 &trans
						   &kp SPACE  &kp RC(X)															 			   &kp RC(FSLH) &kp DEL
																&trans &lts MOUSE INS		&lts MOUSE ENTER &trans
																	&trans &kp INT1		&kp INT1 &trans
																	&trans &kp INT2		&kp INT2 &trans
			>;
		};
		
		
		mouse_layer {
			bindings = <
&to DEFAULT_HD	&trans &trans			&trans			 &trans			   &trans					&trans &trans			&trans		  	 &trans			   &trans &trans
&trans 		&trans &trans			&kp LG(RC(UP))	 &trans			   &trans					&trans &trans			&kp RG(RC(UP))   &trans			   &trans &trans
&trans 		&trans &kp LG(RC(LEFT)) &kp LG(RC(DOWN)) &kp LG(RC(RIGHT)) &trans					&trans &kp RG(RC(LEFT))	&kp RG(RC(DOWN)) &kp RG(RC(RIGHT)) &trans &trans
&trans 		&trans &trans			&trans			 &trans			   &trans					&trans &trans			&trans		  	 &trans			   &trans &trans
									&kp LG(RC(DOWN)) &kp LG(RC(UP))														&kp RG(RC(DOWN)) &kp RG(RC(UP))
																&trans &trans			&trans &trans
																	&trans &trans	&trans &trans
																	&trans &trans	&trans &trans
			>;
		};

		
		function_layer_right {
			bindings = <
&to DEFAULT_HD	  &none &none	 &none   &none	  &tog MOUSE				&out OUT_TOG	 &bt BT_SEL 0  &bt BT_SEL 1	 &bt BT_SEL 2	    &bt BT_SEL 3	&bt BT_CLR
&sys_reset	  &kp KP_NUM    &kp CAPS	 &kp SLCK 	  &kp PSCRN		  &kp PAUSE_BREAK			&kp KP_NUM		 &kp CAPS	   &kp SLCK      &kp PSCRN			&kp PAUSE_BREAK &kp K_PWR
&kp C_VOL_DN	  &kp C_VOL_UP	&kp C_MUTE 	 &kp C_PP	  &kp C_PREV	  &kp C_NEXT 				&kp C_VOL_DN	 &kp C_VOL_UP  &kp C_MUTE	 &kp C_PP		    &kp C_PREV	    &kp C_NEXT
&kp C_AL_CONTACTS &kp C_AL_MAIL &kp C_AL_CCC &kp C_AL_CAL &kp C_AL_WWW	  &kp C_AC_SEARCH			&kp C_AC_SEARCH &kp C_AC_STOP &kp C_AL_CALC &kp C_AC_FAVORITES &kp C_AC_SEND   &kp C_AL_MY_COMPUTER
							&kp C_BRI_DN &kp C_BRI_UP																		   &kp C_AC_BACK &kp C_AC_FORWARD
								&kp C_AL_SELECT_TASK &kp INS					&kp C_AC_HOME &kp C_AC_BACK
									&tog NUM_HD	&kp INS			&tog NUM_L_HD   &tog SPFN_HD
									&to DEFAULT_HD 	&tog NUM_HD		&tog NUM_HD &to DEFAULT_HD 
			>;
		};

		
		function_layer_macros {
			bindings = <
&sys_reset	  &none 	&none		 &none   	  &bt BT_CLR	  &tog MOUSE				&none	 &none  &none	 &none	    &m_equity	&none
&bootloader	  &kp KP_NUM    &kp CAPS	 &kp SLCK 	  &kp PSCRN	  &kp PAUSE_BREAK			&kp KP_NUM		 &kp CAPS	   &kp SLCK      &kp PSCRN			&kp PAUSE_BREAK &kp K_PWR
&kp C_VOL_DN	  &kp C_VOL_UP	&kp C_MUTE 	 &kp C_PP	  &td_names	  &td_emails 				&kp C_VOL_DN	 &kp C_VOL_UP  &kp C_MUTE	 &kp C_PP		    &kp C_PREV	    &kp C_NEXT
&kp C_AL_CONTACTS &kp C_AL_MAIL &kp C_AL_CCC &kp C_AL_CAL &kp C_AL_WWW	  &kp C_AC_SEARCH			&kp C_AC_SEARCH &kp C_AC_STOP &kp C_AL_CALC &kp C_AC_FAVORITES &kp LG(F13)   &kp C_AL_MY_COMPUTER
								&kp C_BRI_DN &kp C_BRI_UP																		   &kp C_AC_BACK &kp C_AC_FORWARD
									&kp C_AL_SELECT_TASK &kp INS					&kp C_AC_HOME &kp C_AC_BACK
										&m_9_16	&kp INS			&tog NUM_L_HD   &tog SPFN_HD
									&to DEFAULT_HD 	&to STENO		&tog NUM_HD &to DEFAULT_HD 
			>;
		};



		function_steno_mods {
			bindings = <
&trans &trans &trans &trans &trans &trans			&trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans			&trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans			&trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans			&trans &trans &trans &trans &trans &trans
		 &trans	&trans					  	  &trans &trans
			&trans &trans				&trans &trans
				&trans &trans		&trans &trans
				&trans &m_tog_steno	&trans &trans
			>;
		};

	};
};


	
