// TODO:
// Macros for full SpaceFN in hardware, Excel layer in HW
// Choosing by BT layer? Requires awareness of host -- or can be done with macros when choosing BT target
// Locality for reset and other combos


// Buscar behaviors originales en zmk/app/dts/behaviors/, overrides con 
// &sk {
// release-after-ms = <1000>;
// };
//
// Nuevos dentro del keymap con
// 
// / {
// behaviors {
	// // Hold-tap for F-keys
	// fm: function_mods {
		// compatible = "zmk,behavior-hold-tap";
		// label = "F_MODS";
		// tapping-term-ms = <450>;
		// flavor = "tap-preferred";
		// #binding-cells=<2>;
		// bindings = <&kp>, <&kp>;
	// };

// keymap { ... };
//};
//
//
// https://docs.zephyrproject.org/latest/guides/dts/bindings.html?highlight=device%20tree%20cells#bindings-file-syntax
// Talks about it a bit.
// https://docs.zephyrproject.org/latest/guides/dts/intro.html?highlight=device%20tree%20cells#writing-property-values
// So, "cells" are arrays of 32-bit integers.
// So "bindings-cells" is a way to say, "when you reference this node from *-bindings, here are how many cell entries you should also include"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>


#define DEFAULT 0
#define DEFAULT_HD 1
#define AL_Q 2
#define AL_W 3
#define AL_E 4
#define AL_R 5
#define AL_O 6
#define AL_P 7
#define AL_SEMI 8
#define AL_Z 9
#define AL_X 10
#define AL_C 11
#define AL_M 12
#define AL_FSLH 13
#define AL_DOT 14
#define PRPINY 15
#define PINY 16
#define NUM 17
#define NUM_HD 18
#define LCNUM 19
#define FN 20
#define NUM_L 21
#define NUM_L_HD 22
#define RCNUM_L 23
#define FN_L 24
#define SPFN 25
#define SPFN_HD 26
#define MOUSE 27
#define FUNC 28
#define FUNC_HD 29

#define COMB_MS 96
#define COMB_MS_FST 66

#define COMB_LAY_QW DEFAULT DEFAULT_HD
#define COMB_LAY_NV FN
#define COMB_LAY_ALL COMB_LAY_QW COMB_LAY_NV

#define ADAPTIVE_DELAY 335 
#define MACRO_WAIT 12
#define MACRO_WAIT_LONG 95


// Sticky layer
&sl {
	release-after-ms = <1750>;
};


// Sticky key
&sk {
	release-after-ms = <1500>;
};


/ {
combos {
	compatible = "zmk,combos";
	
	// combo_numeric {
		// timeout-ms = <200>;
		// key-positions = <32 57 58>;				// Ctrl 1U L, Ctrl 1U R, y el 5
		// bindings = <&tog NUM>;
	// };
	
	// combo_hard_dvorak_enable {
		// timeout-ms = <200>;
		// key-positions = <27 57 58>;				// Ctrl 1U L, Ctrl 1U R, y la E
		// bindings = <&tog NEWVO>;
	// };
	
	// combo_pinyin_enable {
		// timeout-ms = <200>;
		// key-positions = <34 57 58>;				// Ctrl 1U L, Ctrl 1U R, y la S
		// bindings = <&tog PRPINY>;
	// };
	
	combo_bootloader {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <32 47 63>;				// Última de abajo, el 5, y shift derecho
		bindings = <&bootloader>;
	};
	
	
	combo_EXCL {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <13 25>;				// ' y A
		bindings = <&kp EXCL>;
	};
	
	combo_INV_EXCL {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <49 13 25>;				// \, ' y A
		bindings = <&kp RA(N1)>;
	};
	
	combo_AT {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <14 26>;				// , y O
		bindings = <&kp AT>;
	};
	
	combo_HASH {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <15 27>;				// . y E
		bindings = <&kp HASH>;
	};
	
	combo_DLLR {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <16 28>;				// P y I
		bindings = <&kp DLLR>;
	};
	
	combo_PRCNT {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <17 29>;				// Y y U
		bindings = <&kp PRCNT>;
	};
	
	combo_CARET {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <18 30>;				// F y D
		bindings = <&kp CARET>;
	};
	
	combo_AMPS {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <19 31>;				// G y H
		bindings = <&kp AMPERSAND>;
	};
	
	combo_STAR {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <20 32>;				// L y T
		bindings = <&kp STAR>;
	};
	
	combo_LPAR {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <21 33>;				// R y N
		bindings = <&kp LPAR>;
	};
	
	combo_RPAR {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <22 34>;				// C y S
		bindings = <&kp RPAR>;
	};
	
	combo_TAB_L {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <28 40>;				// I y K
		bindings = <&kp TAB>;
	};
	
	combo_ESC_L {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <29 41>;				// U y X
		bindings = <&kp ESC>;
	};
	
	combo_ESC_R {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <30 42>;				// U y X
		bindings = <&kp ESC>;
	};
	
	combo_TAB_R {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <31 43>;				// H y M
		bindings = <&kp TAB>;
	};
	
	combo_PIPE2 {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <38 48>;				// Q y `
		bindings = <&kp PIPE2>;
	};
	
	combo_PIPE {
		timeout-ms = <COMB_MS>;
		layers = <COMB_LAY_ALL>;
		key-positions = <39 49>;				// \ y J
		bindings = <&kp PIPE>;
	};
	
	// Específicos para cada distribución		
	combo_QW_SEMI {
		timeout-ms = <COMB_MS_FST>;
		layers = <COMB_LAY_QW>;
		key-positions = <25 37>;				// A y ;
		bindings = <&kp LS(Z)>;
	};
	
	combo_NV_SEMI {
		timeout-ms = <COMB_MS_FST>;
		layers = <COMB_LAY_NV>;
		key-positions = <25 37>;				// A y ;
		bindings = <&kp SEMI>;
	};
	
/*	combo_K {
		timeout-ms = <50>;
		layers = <COMB_LAY_QW>;
		key-positions = <14 15>;				// A y ;
		bindings = <&kp RA(W)>;
	};
*/
};
};



/ {
behaviors {
	// Sticky key with optional quick release - Doesn't work well, modifier lifted just before keypress :(

	sq: sticky_q {
		compatible = "zmk,behavior-sticky-key";
		label = "STICKY_Q";
		quick-release;
		#binding-cells = <1>;
		release-after-ms = <1500>;
		bindings = <&kp>;
	};
	
	
	sk_m: sticky_q {
		compatible = "zmk,behavior-sticky-key";
		label = "SK_FOR_MACRO";
		// quick-release;
		#binding-cells = <1>;
		release-after-ms = <MACRO_WAIT_LONG>;
		bindings = <&kp>;
	};
	
	
	sk_mq: sticky_mq {
		compatible = "zmk,behavior-sticky-key";
		label = "SK_FOR_MACRO_QR";
		quick-release;
		#binding-cells = <1>;
		release-after-ms = <MACRO_WAIT_LONG>;
		bindings = <&kp>;
	};



	// Hold-tap for F-keys
	fn: fn_mod {
		compatible = "zmk,behavior-hold-tap";
		label = "F_MOD";
		tapping-term-ms = <295>;
		flavor = "balanced";
		#binding-cells = <2>;
		bindings = <&kp>, <&kp>;
	};
	
	// Hold-tap for Upper F-keys
	fm: high_fn_mod {
		compatible = "zmk,behavior-hold-tap";
		label = "HF_MOD";
		tapping-term-ms = <580>;
		flavor = "balanced";
		#binding-cells = <2>;
		bindings = <&kp>, <&kp>;
	};

	// Hold-tap for layer-space with retro-tap - not fully using until macros are ready
	lts: layer_tap_sfn {
		compatible = "zmk,behavior-hold-tap";
		label = "LAYER_TAP_SFN";
		#binding-cells = <2>;
		flavor = "hold-preferred";		// hold behavior when tapping-term-ms expired or another key is pressed
		tapping-term-ms = <10000>;
		bindings = <&mo>, <&kp>;
		retro-tap;						// tap behavior triggered when releasing if no other key was pressed
	};
	
	// Hold-tap for ctlr/esc
	cesc: hold_tap_ctrl_esc {
		compatible = "zmk,behavior-hold-tap";
		label = "CTRL_ESC";
		#binding-cells = <2>;
		tapping-term-ms = <240>;
		flavor = "balanced";		// hold behavior when tapping-term-ms expired or another key is pressed
		bindings = <&kp>, <&kp>;
	};
	
	
	hmf: homerow_mods_fast {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MODS_FAST";
		#binding-cells = <2>;
		tapping-term-ms = <130>;
		quick-tap-ms = <0>;
		flavor = "balanced";			// hold behavior when tapping-term-ms has expired or another key is pressed and released
		bindings = <&kp>, <&kp>;
	};
	
	hm: homerow_mods {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MODS";
		#binding-cells = <2>;
		tapping-term-ms = <156>;
		quick-tap-ms = <0>;
		flavor = "balanced";			// hold behavior when tapping-term-ms has expired or another key is pressed and released
		bindings = <&kp>, <&kp>;
	};
	
	hms: homerow_mod_slow {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MOD_SLOW";
		#binding-cells = <2>;
		tapping-term-ms = <220>;
		quick-tap-ms = <0>;
		flavor = "balanced";			// hold behavior when tapping-term-ms has expired or another key is pressed and released
		bindings = <&kp>, <&kp>;
	};
	
	// For that zpecial finger
	hmss: homerow_mod_sup_slow {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MOD_SUP_SLOW";
		#binding-cells = <2>;
		tapping-term-ms = <249>;
		quick-tap-ms = <0>;
		flavor = "tap-preferred";		// hold behavior when tapping-term-ms has expired. tap behavior when another key is pressed
		bindings = <&kp>, <&kp>;
	};

	slad: adaptive_l {
		compatible = "zmk,behavior-sticky-key";
		label = "SL_AL";
		quick-release;
		#binding-cells = <1>;
		release-after-ms = <ADAPTIVE_DELAY>;
		bindings = <&mo>;
	};

/*	
	#define ADAPT_KEY(char) \
		ADAPT_KEY_W_LAYER(AK_ ## char, char)

	#define ADAPT_KEY_W_LAYER(lbl, char) \
	ak_##char: adaptive_key_##char { \
			compatible = "zmk,behavior-macro"; \
			label = #lbl; \
			#binding-cells = <0>; \
			sleep = <3>; \
			bindings = <&kp char>, <&slad AL_##char> ; \
		};

	#define M_DXY(x, y) \
		MACRO_DELETE_WRITE_X_Y(M_D ##x ##y, <&kp x>, <&kp y>)
		
	#define MACRO_DELETE_WRITE_X_Y(lbl, x, y) \
		m_d ##x ##y: m_d ##x ##y { \
			compatible = "zmk,behavior-macro"; \
			label = #lbl; \
			#binding-cells = <0>; \
			sleep = <MACRO_WAIT>; \
			bindings = <&kp BSPC>, ##x, ##y; \
		}; 



	ADAPT_KEY(p)
	ADAPT_KEY(o)
	ADAPT_KEY(e)
	ADAPT_KEY(w)
	ADAPT_KEY(c)
	ADAPT_KEY(m)
	ADAPT_KEY(FSLH)
	ADAPT_KEY(DOT)
	M_DXY(B, A)
	M_DXY(B, C)
	M_DXY(D, W)
	M_DXY(J, M)


*/

	ak_Q: adapt_key_Q {
		compatible = "zmk,behavior-macro";
		label = "AK_Q";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp Q>, <&slad AL_Q>;
	};

	ak_W: adapt_key_W {
		compatible = "zmk,behavior-macro";
		label = "AK_W";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp W>, <&slad AL_W>;
	};

	ak_E: adapt_key_E {
		compatible = "zmk,behavior-macro";
		label = "AK_E";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp E>, <&slad AL_E>;
	};
	
	ak_R: adapt_key_R {
		compatible = "zmk,behavior-macro";
		label = "AK_R";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp R>, <&slad AL_R>;
	};

	ak_O: adapt_key_O {
		compatible = "zmk,behavior-macro";
		label = "AK_O";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp O>, <&slad AL_O>;
	};

	ak_P: adapt_key_P {
		compatible = "zmk,behavior-macro";
		label = "AK_P";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp P>, <&slad AL_P>;
	};

	ak_SEMI: adapt_key_SEMI {
		compatible = "zmk,behavior-macro";
		label = "AK_SEMI";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp SEMI>, <&slad AL_SEMI>;
	};

	ak_Z: adapt_key_Z {
		compatible = "zmk,behavior-macro";
		label = "AK_Z";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp Z>, <&slad AL_Z>;
	};

	ak_X: adapt_key_X {
		compatible = "zmk,behavior-macro";
		label = "AK_X";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp X>, <&slad AL_X>;
	};

	ak_C: adapt_key_C {
		compatible = "zmk,behavior-macro";
		label = "AK_C";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp C>, <&slad AL_C>;
	};

	ak_M: adapt_key_M {
		compatible = "zmk,behavior-macro";
		label = "AK_M";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp M>, <&slad AL_M>;
	};
		
	ak_FSLH: adapt_key_FSLH {
		compatible = "zmk,behavior-macro";
		label = "AK_FSLH";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp FSLH>, <&slad AL_FSLH>;
	};

	ak_DOT: adaptive_key_DOT {
		compatible = "zmk,behavior-macro";
		label = "AK_DOT";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp DOT>, <&slad AL_DOT>;
	};
	

	m_hd_on: m_hd_on {
		compatible = "zmk,behavior-macro";
		label = "M_HD_ON";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT_LONG>;
		bindings = <&tog DEFAULT_HD>, <&sk_mq RCTRL>, <&kp C_AC_REFRESH>;
	};

	m_hd_off: m_hd_off {
		compatible = "zmk,behavior-macro";
		label = "M_HD_OFF";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT_LONG>;
		bindings = <&tog DEFAULT_HD>, <&sk_mq LCTRL>, <&kp C_AC_REFRESH>;
	};


	m_dba: m_dba {
		compatible = "zmk,behavior-macro";
		label = "M_DBA";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT>;
		bindings = <&kp BSPC>, <&kp B>, <&kp A>;
	};

	m_dbc: m_dbc {
		compatible = "zmk,behavior-macro";
		label = "M_DBC";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT>;
		bindings = <&kp BSPC>, <&kp B>, <&kp C>;
	};

	m_ddw: m_ddw {
		compatible = "zmk,behavior-macro";
		label = "M_DDW";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT>;
		bindings = <&kp BSPC>, <&kp D>, <&kp W>;
	};

	m_djm: m_djm {
		compatible = "zmk,behavior-macro";
		label = "M_DJM";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT>;
		bindings = <&kp BSPC>, <&kp J>, <&kp M>;
	};

	m_dge: m_dge {
		compatible = "zmk,behavior-macro";
		label = "M_DGE";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT>;
		bindings = <&kp BSPC>, <&kp G>, <&kp E>;
	};

	m_dgc: m_dgc {
		compatible = "zmk,behavior-macro";
		label = "M_DGC";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT>;
		bindings = <&kp BSPC>, <&kp G>, <&kp C>;
	};

	m_dvy: m_dvy {
		compatible = "zmk,behavior-macro";
		label = "M_DVY";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT>;
		bindings = <&kp BSPC>, <&kp V>, <&kp Y>;
	};

	m_dga: m_dga {
		compatible = "zmk,behavior-macro";
		label = "M_DGA";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT>;
		bindings = <&kp BSPC>, <&kp G>, <&kp A>;
	};

	m_dkk: m_dkk {
		compatible = "zmk,behavior-macro";
		label = "M_WDW";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT>;
		bindings = <&kp BSPC>, <&kp Y>;
	};

	m_dqt: m_dqt {
		compatible = "zmk,behavior-macro";
		label = "M_DSQT";
		#binding-cells = <0>;
		sleep = <MACRO_WAIT>;
		bindings = <&kp BSPC>, <&kp SQT>;
	};

	m_mk: m_mk {
		compatible = "zmk,behavior-macro";
		label = "M_MK";
		#binding-cells = <0>;
		sleep = <3>;
		bindings = <&kp M>, <&kp K>;
	};


	hms_m_dot: homerow_mod_w_macro {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MOD_SLOW_W_MACRO";
		#binding-cells = <2>;
		tapping-term-ms = <220>;
		quick-tap-ms = <0>;
		flavor = "balanced";
		bindings = <&kp>, <&ak_DOT>;
	};

	hms_m_m: homerow_mod_m_macro {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MOD_SLOW_M_MACRO";
		#binding-cells = <2>;
		tapping-term-ms = <220>;
		quick-tap-ms = <0>;
		flavor = "balanced";
		bindings = <&kp>, <&ak_M>;
	};

	/*
	hms_m_g: homerow_mod_g_macro {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MOD_SLOW_G_MACRO";
		#binding-cells = <2>;
		tapping-term-ms = <220>;
		quick-tap-ms = <0>;
		flavor = "balanced";
		bindings = <&kp>, <&ak_G>;
	};
	*/

	hms_m_x: homerow_mod_x_macro {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MOD_SLOW_X_MACRO";
		#binding-cells = <2>;
		tapping-term-ms = <220>;
		quick-tap-ms = <0>;
		flavor = "balanced";
		bindings = <&kp>, <&ak_X>;
	};
	
	
	hms_m_c: homerow_mod_c_macro {
		compatible = "zmk,behavior-hold-tap";
		label = "HOMEROW_MOD_SLOW_C_MACRO";
		#binding-cells = <2>;
		tapping-term-ms = <220>;
		quick-tap-ms = <0>;
		flavor = "balanced";
		bindings = <&kp>, <&ak_C>;
	};
};
	
	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
&kp ESC   		&fn F7 N1	  &fn F5 N2		  &fn F3 N3	  &fn F1 N4	   &fn F9 N5						&fn F8 N6	 &fn F10 N7	  &fn F2 N8		  &fn F4 N9		&fn F6 N0	   &fn F11 RBKT
&kp TAB   		&kp Q		  &kp W			  &kp E		  &kp R		   &hmss LWIN T						&hmss RWIN Y		 &kp U		  &kp I			  &kp O			&kp P		   &fn F12 LBKT
&cesc LCTRL ESC &kp A		  &kp S			  &kp D		  &kp F		   &hms RALT G							&hms RALT H		 &kp J		  &kp K			  &kp L			&kp SEMI	   &kp SQT
&hms LSHFT KP_NUM		&kp Z		  &hms LALT X	  &hmf LSHFT C &hms LCTRL V &lt NUM B						&lt NUM N &hms RCTRL M &hmf RSHFT COMMA &hms LALT DOT &kp FSLH	   &hms RSHFT LANG4
							&hm TILDE GRAVE &hm RALT BSLH									    							  &kp MINUS		  &kp EQUAL
													&kp BSPC &lts SPFN DEL					&lts SPFN ENTER &kp SPACE
													&kp LALT &lt NUM KP_NUM		&lt NUM KP_NUM	&kp LWIN
														&sl FUNC &lt NUM_L LANG4	&lt NUM_L LANG4 &sl FUNC
			>;
		};
		
		default_layer_hd {
			bindings = <
&trans	&fn F9 N1  &fn F3 N2  &fn F1 N3 &fn F5 N4  &fn F7 N5			&fn F6 N6 &fn F2 N7 &fn F10 N8  &fn F4 N9	&fn F8 N0   &fn F11 DEL
&trans	&ak_Q &ak_W  &ak_E  &ak_R  &trans								&trans &trans &trans &ak_O  &ak_P  &trans
&trans	&trans &trans &trans &trans &trans								&trans &trans &trans &trans &ak_SEMI &trans
&trans	&ak_Z &hms_m_x LALT 0  &hms_m_c LSHFT 0 &trans &lt NUM_HD B								&lt NUM_HD N &hms_m_m RCTRL 0 &hms RSHFT COMMA &hms_m_dot LALT 0 &ak_FSLH &trans
				    &hm TILDE RBKT &hm H BSLH												   &trans &trans
									&kp GRAVE &kp BSPC				&lts SPFN_HD ENTER  &trans
									&trans &kp DEL				&tog NUM_HD		&trans
										&sl FUNC_HD &kp	C_AL_CALC	&kp C_AC_REFRESH &sl FUNC_HD
			>;
		};


		adaptive_q {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &m_dqt &m_dge  &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
	&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
	

		adaptive_w {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &kp W  &m_dkk &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};

	
		adaptive_e {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&kp G  &m_ddw &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &kp B  &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
	
		adaptive_r {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &kp C  &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
	
		adaptive_o {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &kp M  &m_mk  &trans &kp L  &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};

		
		adaptive_p {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &kp O  &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
	

		adaptive_SEMI {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&m_dga &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};


		adaptive_z {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &m_dgc &trans &trans						&trans &trans &trans &trans &kp B  &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};


		adaptive_x {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&m_dvy &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
		
		
		adaptive_c {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&kp G  &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
		
			

		adaptive_m {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&kp G  &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &kp J  &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
	 									&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};

		adaptive_fslh {
			bindings = <
&kp ESC	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&m_dba &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &m_dbc &trans &trans						&trans &m_djm &trans &trans &trans &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};
	
		adaptive_dot {
			bindings = <
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans	
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans	&trans &trans &trans &trans &trans						&trans &trans &trans &trans &kp L  &trans
				   &trans &trans										   &trans &trans
									&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};		


		
		pre_pinyin_layer {
			bindings = <
&to DEFAULT &trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans		&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans		&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
&trans		&trans &trans &trans &trans &trans						&trans &trans &trans &trans &trans &trans
				   &trans &trans												  &trans &trans
									&trans &lts PINY DEL		&lts PINY ENTER &trans
										&trans &trans		&trans &trans
										&trans &trans		&trans &trans
			>;
		};
		
		pinyin_layer {
			bindings = <
&trans &trans	 &trans	   &trans		&trans		 &trans								&trans		&trans		 &trans		  &trans	 &trans		   &trans
&trans &kp N1	 &kp N2	   &kp N3		&kp N4		 &trans								&kp LA(TAB) &kp PG_UP	 &kp UP 	  &kp PG_DN  &kp TAB	   &trans
&trans &kp N1	 &kp N2	   &kp N3		&kp N4		 &trans								&kp HOME 	&kp LEFT	 &kp DOWN     &kp RIGHT  &hm RCTRL END &kp NON_US_BSLH
&trans &trans	 &trans	   &trans		&trans		 &trans								&kp BSPC	&kp RC(BSPC) &kp RC(DEL)  &kp ESC	 &kp ENTER	   &trans
				 &trans	   &trans																	 			 &kp RC(FSLH) &kp SPACE		 
														&trans &trans				&trans &trans
															&trans &trans		&trans &trans
															&trans &trans		&trans &trans
			>;
		};

		
		numeric_layer {
			bindings = <
&to DEFAULT	&fm F19 F7		 &fm F17 F5 &fm F15 F3   &fm F13 F1	  &fm F21 F9	 				&fm F20 F8	&fm F14 F2	  &kp KP_DIVIDE &kp KP_MULTIPLY &kp GRAVE		 &fm F23 F11
&trans		&kp TAB			 &kp PG_UP  &kp UP       &kp PG_DN	  &kp LA(TAB)					&kp LA(N3)	&fm F7 LS(N1) &fm F8 LS(N6) &fm F9 LS(N5)	&fm F12 KP_MINUS &fm F24 F12
&trans		&lts LCNUM ENTER &kp LEFT   &kp DOWN	 &kp RIGHT	  &kp LA(N1)					&kp RC(INS)	&fm F4 LS(N9) &fm F5 LS(N2) &fm F6 LS(N0)	&kp KP_PLUS		 &trans
&trans		&trans			 &kp ESC	&kp RC(DEL)  &kp RC(BSPC) &kp LA(N2)					&kp	LS(INS)	&fm F1 LS(N4) &fm F2 LS(N8) &fm F3 LS(N3)	&kp ENTER		 &trans
							 &kp SPACE  &kp RC(FSLH)												  					  &fm F10 LS(N7) &fm F11 KP_DOT
																	&trans &mo FN			&mo FN &trans
																		&trans &mo FN	&mo FN &trans
																		&trans &mo FN	&mo FN &trans
			>;
		};
		

		numeric_layer_hd {
			bindings = <
&to DEFAULT_HD	&fm F21 F9	 &fm F15 F3	   &fm F13 F1	 &fm F17 F5		&fm F19 F7	 	  				&kp N7	&fm F14 F2	  &kp KP_DIVIDE &kp KP_MULTIPLY &kp GRAVE		 &fm F23 F11
&trans		&kp TAB			 &kp PG_UP  &kp UP       &kp PG_DN	  &kp LA(TAB)					&kp LA(N3)	&fm F7 LS(N5) &fm F8 LS(N0) &fm F9 LS(N1)	&fm F12 KP_MINUS &fm F24 F12
&trans		&lts LCNUM ENTER &kp LEFT   &kp DOWN	 &kp RIGHT	  &kp LA(N1)					&kp RC(INS)	&fm F4 LS(N9) &fm F5 LS(N4) &fm F6 LS(N6)	&kp KP_PLUS		 &trans
&trans		&trans			 &kp ESC	&kp RC(DEL)  &kp RC(BSPC) &kp LA(N2)					&kp	LS(INS)	&fm F1 LS(N3) &fm F2 LS(N7) &fm F3 LS(N2)	&kp ENTER		 &trans
							 &kp RBKT	&hm H RC(X)												  					  &fm F10 LS(N8) &fm F11 KP_DOT
														&kp H &lts SPFN_HD BSPC					&lts SPFN_HD  ENTER &lts SPFN_HD SPACE
																		&trans &kp DEL		&to DEFAULT_HD	&trans
																		&trans &mo FN		&mo FN &trans
			>;
		};
		

		left_ctrl_num_layer {
			bindings = <
&trans &trans &trans		&trans		 &trans		   &trans						&trans &trans &trans &trans &trans &trans
&trans &trans &kp LA(PG_UP)	&kp RC(UP)	 &kp LA(PG_DN) &kp LS(LA(TAB))				&trans &trans &trans &trans &trans &trans
&trans &trans &kp RC(LEFT)	&kp RC(DOWN) &kp RC(RIGHT) &trans &trans				&trans &trans &trans &trans &trans &trans
&trans &trans &trans		&trans		 &trans		   &trans						&trans &trans &trans &trans &trans &trans
		 	  &trans		&trans															  	  &trans &trans
															&trans &trans			&trans &trans
																&trans &trans	&trans &trans
																&trans &trans	&trans &trans
			>;
		};
		
		fn_layer {
			bindings = <
&trans &trans  &trans  &trans  &trans  &trans					&trans &trans	  &trans	  &trans	  &trans	  &trans
&trans &kp F24 &kp F19 &kp F20 &kp F21 &trans					&trans &fm F19 F7 &fm F20 F8  &fm F21 F9  &fm F24 F12 &trans
&trans &trans  &kp F16 &kp F17 &kp F18 &trans					&trans &fm F16 F4 &fm F17 F5  &fm F18 F6  &trans	  &trans
&trans &trans  &kp F13 &kp F14 &kp F15 &trans		   			&trans &fm F13 F1 &fm F14 F2  &fm F15 F3  &trans	  &trans
			   &kp F23 &kp F22													  &fm F22 F10 &fm F23 F11	
									&trans &trans			&trans &trans
										&trans &trans	&trans &trans
										&trans &trans	&trans &trans
			>;
		};			
		

		
		numeric_layer_left {
			bindings = <
&to DEFAULT	&kp GRAVE		 &kp KP_MULTIPLY &kp KP_DIVIDE	&fm F14 F2	  &fm F21 F9 				&fm F20 F8	&fm F16 F4	 &fm F14 F2	 &fm F16 F4	  &fm F18 F6		 &fm F23 F11
&trans		&fm F12 KP_MINUS &fm F9 LS(N5)	 &fm F8 LS(N6)	&fm F7 LS(N1) &kp LA(TAB)				&kp LA(TAB)	&kp PG_UP	 &kp UP		 &kp PG_DN	  &kp TAB			 &fm F24 F12
&trans		&kp KP_PLUS		 &fm F6 LS(N0)	 &fm F5 LS(N2)	&fm F4 LS(N9) &kp RC(INS)				&kp LA(N1)	&kp LEFT	 &kp DOWN	 &kp RIGHT	  &lts RCNUM_L ENTER &trans
&trans		&kp ENTER		 &fm F3 LS(N3)	 &fm F2 LS(N8)	&fm F1 LS(N4) &kp LS(INS)				&kp LA(N2)  &kp RC(BSPC) &kp RC(DEL) &kp ESC	  &trans			 &trans
							 &fm F11 KP_DOT  &fm F10 LS(N7) 													  					 &kp SPACE	 &kp RC(FSLH)
																		&trans &mo FN_L			&mo FN_L &trans
																			&trans &mo FN_L	&mo FN_L &trans
																			&trans &mo FN_L	&mo FN_L &trans
			>;
		};
	


		numeric_layer_left_hd {
			bindings = <
&to DEFAULT	&kp GRAVE		 &kp KP_MULTIPLY &kp KP_DIVIDE	&fm F17 F5	  &fm F19 F7 				&fm F18 F6 &fm F14 F2	 &fn F10 N0 &fm F16 F4	 &fm F20 F8		 &fm F23 F11
&trans		&fm F12 KP_MINUS &fm F9 LS(N1)	 &fm F8 LS(N0)	&fm F7 LS(N5) &kp LA(TAB)				&kp LA(TAB)	&kp PG_UP	 &kp UP		 &kp PG_DN	  &kp TAB			 &fm F24 F12
&trans		&kp KP_PLUS		 &fm F6 LS(N6)	 &fm F5 LS(N4)	&fm F4 LS(N9) &kp RC(INS)				&kp LA(N1)	&kp LEFT	 &kp DOWN	 &kp RIGHT	  &lts RCNUM_L ENTER &trans
&trans		&kp ENTER		 &fm F3 LS(N2)	 &fm F2 LS(N7)	&fm F1 LS(N3) &kp LS(INS)				&kp LA(N2)  &kp RC(BSPC) &kp RC(DEL) &kp ESC	  &trans			 &trans
							 &fm F11 KP_DOT  &fm F10 LS(N7) 													  					 &kp SPACE	 &kp RC(FSLH)
																		&trans &mo FN_L			&mo FN_L &trans
																			&trans &mo FN_L	&mo FN_L &trans
																			&trans &mo FN_L	&mo FN_L &trans
			>;
		};
		
		right_ctrl_num_layer {
			bindings = <
&trans &trans &trans &trans &trans &trans					&trans			&trans		  &trans	   &trans		 &trans	&trans
&trans &trans &trans &trans &trans &trans					&kp LS(LA(TAB)) &kp LA(PG_UP) &kp RC(UP)   &kp LA(PG_DN) &trans &trans
&trans &trans &trans &trans &trans &trans					&trans			&kp RC(LEFT)  &kp RC(DOWN) &kp RC(RIGHT) &trans &trans
&trans &trans &trans &trans &trans &trans					&trans			&trans		  &trans	   &trans		 &trans	&trans
		 	  &trans &trans																  &trans	   &trans
								&trans &trans			&trans &trans
									&trans &trans	&trans &trans
									&trans &trans	&trans &trans
			>;
		};
		
		fn_layer_left {
			bindings = <
&trans &trans	   &trans	   &trans	   &trans	  &trans					&trans &trans  &trans  &trans  &trans  &trans
&trans &fm F24 F12 &fm F21 F9  &fm F20 F8  &fm F19 F7 &trans					&trans &kp F19 &kp F20 &kp F21 &kp F24 &trans
&trans &trans	   &fm F18 F6  &fm F17 F5  &fm F16 F4 &trans					&trans &kp F16 &kp F17 &kp F18 &trans  &trans
&trans &trans	   &fm F15 F3  &fm F14 F2  &fm F13 F1 &trans		   			&trans &kp F13 &kp F14 &kp F15 &trans  &trans
				   &fm F23 F11 &fm F22 F10 													   &kp F22 &kp F23	
													&trans &trans			&trans &trans
														&trans &trans	&trans &trans
														&trans &trans	&trans &trans
			>;
		};
			

				
		spacefn_layer {
			bindings = <
// &to DEFAULT	&fm F13 F1	   &fm F14 F2 &fm F15 F3   &fm F16 F4	 &fm F17 F5						  &fm F18 F6  &fm F19 F7   &fm F20 F8   &fm F21 F9 &fm F22 F10	 &fm F23 F11
&to DEFAULT	&fm F19 F7	   &fm F17 F5 &fm F15 F3   &fm F13 F1	 &fm F21 F9						&fm F20 F8	  &fm F22 F10  &fm F14 F2   &fm F16 F4 &fm F18 F6    &fm F23 F11
&trans 		&kp TAB		   &kp PG_UP  &kp UP       &kp PG_DN	 &kp LA(TAB)					&kp LA(TAB) &kp PG_UP	   &kp UP 	    &kp PG_DN  &kp TAB		 &fm F24 F12
&trans 		&hm RCTRL HOME &kp LEFT   &kp DOWN     &kp RIGHT	 &kp END						&kp HOME 	  &kp LEFT	   &kp DOWN     &kp RIGHT  &hm RCTRL END &kp NON_US_BSLH
&trans		&kp ENTER	   &hms LALT ESC	&hm LSHFT RC(DEL)  &hms RCTRL RC(BSPC)  &kp BSPC			&kp BSPC	  &hms RCTRL RC(BSPC) &hm LSHFT RC(DEL)  &hms LALT ESC	   &kp ENTER	 &trans
						   &kp SPACE  &kp RC(FSLH)															 			   &kp RC(FSLH) &kp DEL
																&trans &lts MOUSE INS		&lts MOUSE ENTER &trans
																	&trans &kp INT1		&kp INT1 &trans
																	&trans &kp INT2		&kp INT2 &trans
			>;
		};
		


		spacefn_layer_hd {
			bindings = <
&to DEFAULT	&fm F21 F9	 &fm F15 F3	  &fm F13 F1	&fm F17 F5 	&fm F19 F7	    				 &fm F18 F6  &fm F14 F2	 &fm F22 F10 	  &fm F16 F4 &fm F20 F8    &fm F23 F11
&trans 		&kp TAB		   &kp PG_UP  &kp UP       &kp PG_DN	 &kp LA(TAB)					&kp LA(TAB) &kp PG_UP	   &kp UP 	    &kp PG_DN  &kp TAB		 &fm F24 F12
&trans 		&hm RCTRL HOME &kp LEFT   &kp DOWN     &kp RIGHT	 &kp END						&kp HOME 	  &kp LEFT	   &kp DOWN     &kp RIGHT  &hm RCTRL END &kp NON_US_BSLH
&trans		&kp ENTER	   &hms LALT ESC	&hm LSHFT RC(DEL)  &hms RCTRL RC(BSPC)  &kp BSPC			&kp BSPC	  &hms RCTRL RC(BSPC) &hm LSHFT RC(DEL)  &hms LALT ESC	   &kp ENTER	 &trans
						   &kp SPACE  &kp RC(FSLH)															 			   &kp RC(FSLH) &kp DEL
																&trans &lts MOUSE INS		&lts MOUSE ENTER &trans
																	&trans &kp INT1		&kp INT1 &trans
																	&trans &kp INT2		&kp INT2 &trans
			>;
		};
		
		mouse_layer {
			bindings = <
&to DEFAULT	&trans &trans			&trans			 &trans			   &trans					&trans &trans			&trans		  	 &trans			   &trans &trans
&trans 		&trans &trans			&kp LG(RC(UP))	 &trans			   &trans					&trans &trans			&kp RG(RC(UP))   &trans			   &trans &trans
&trans 		&trans &kp LG(RC(LEFT)) &kp LG(RC(DOWN)) &kp LG(RC(RIGHT)) &trans					&trans &kp RG(RC(LEFT))	&kp RG(RC(DOWN)) &kp RG(RC(RIGHT)) &trans &trans
&trans 		&trans &trans			&trans			 &trans			   &trans					&trans &trans			&trans		  	 &trans			   &trans &trans
									&kp LG(RC(DOWN)) &kp LG(RC(UP))														&kp RG(RC(DOWN)) &kp RG(RC(UP))
																&trans &trans			&trans &trans
																	&trans &trans	&trans &trans
																	&trans &trans	&trans &trans
			>;
		};
		
		function_layer {
			bindings = <
&to DEFAULT		  &to DEFAULT_HD	&none		 &none		&tog PRPINY	  &tog MOUSE				&out OUT_TOG	 &bt BT_SEL 0  &bt BT_SEL 1	 &bt BT_SEL 2	    &bt BT_SEL 3	&bt BT_CLR
&m_hd_on		  &kp KP_NUM    &kp CAPS	 &kp SLCK 	  &kp PSCRN		  &kp PAUSE_BREAK			&kp KP_NUM		 &kp CAPS	   &kp SLCK      &kp PSCRN			&kp PAUSE_BREAK &kp K_PWR
&kp C_VOL_DN	  &kp C_VOL_UP	&kp C_MUTE 	 &kp C_PP	  &kp C_PREV	  &kp C_NEXT 				&kp C_VOL_DN	 &kp C_VOL_UP  &kp C_MUTE	 &kp C_PP		    &kp C_PREV	    &kp C_NEXT
&kp C_AL_CONTACTS &kp C_AL_MAIL &kp C_AL_CCC &kp C_AL_CAL &kp C_AL_WWW	  &kp C_AC_SEARCH			&kp C_AC_REFRESH &kp C_AC_STOP &kp C_AL_CALC &kp C_AC_FAVORITES &kp C_AC_SEND   &kp C_AL_MY_COMPUTER
								&kp C_BRI_DN &kp C_BRI_UP																		   &kp C_AC_BACK &kp C_AC_FORWARD
														&kp C_AL_SELECT_TASK &kp INS			&kp C_AC_HOME &kp C_AC_BACK
																	&tog SPFN	&tog NUM	&tog NUM   &tog SPFN
																	&bootloader &tog NUM_L	&tog NUM_L &reset 
			>;
		};


		
		function_layer_hd {
			bindings = <
&to DEFAULT_HD		  &to DEFAULT &none	 &none   &tog PRPINY	  &tog MOUSE				&out OUT_TOG	 &bt BT_SEL 0  &bt BT_SEL 1	 &bt BT_SEL 2	    &bt BT_SEL 3	&bt BT_CLR
&m_hd_off	  &kp KP_NUM    &kp CAPS	 &kp SLCK 	  &kp PSCRN		  &kp PAUSE_BREAK			&kp KP_NUM		 &kp CAPS	   &kp SLCK      &kp PSCRN			&kp PAUSE_BREAK &kp K_PWR
&kp C_VOL_DN	  &kp C_VOL_UP	&kp C_MUTE 	 &kp C_PP	  &kp C_PREV	  &kp C_NEXT 				&kp C_VOL_DN	 &kp C_VOL_UP  &kp C_MUTE	 &kp C_PP		    &kp C_PREV	    &kp C_NEXT
&kp C_AL_CONTACTS &kp C_AL_MAIL &kp C_AL_CCC &kp C_AL_CAL &kp C_AL_WWW	  &kp C_AC_SEARCH			&kp C_AC_SEARCH &kp C_AC_STOP &kp C_AL_CALC &kp C_AC_FAVORITES &kp C_AC_SEND   &kp C_AL_MY_COMPUTER
								&kp C_BRI_DN &kp C_BRI_UP																		   &kp C_AC_BACK &kp C_AC_FORWARD
														&kp C_AL_SELECT_TASK &kp INS					&kp C_AC_HOME &kp C_AC_BACK
																	&tog SPFN_HD	&tog NUM_HD		&tog NUM_HD   &tog SPFN_HD
																	&bootloader 	&tog NUM_L_HD		&tog NUM_L_HD &reset 
			>;
		};

	};
};


	
